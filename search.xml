<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6数组对象新增方法</title>
    <url>/2021/04/11/ES6%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-Array-from"><a href="#1-Array-from" class="headerlink" title="1. Array.from()"></a>1. Array.from()</h3><p>Array.from 方法用于将两类对象转为真正的数组：类数组的对象（ array-like object ）和可遍历（ iterable ）的对象（包括 ES6 新增的数据结构 Set 和 Map ）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arrayLike &#x3D; &#123;</span><br><span class="line">　　&#39;0&#39;: &#39;a&#39;,</span><br><span class="line">　　&#39;1&#39;: &#39;b&#39;,</span><br><span class="line">　　&#39;2&#39;: &#39;c&#39;,</span><br><span class="line">　　length: 3</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; ES5 的写法</span><br><span class="line">var arr1 &#x3D; [].slice.call(arrayLike); &#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&#x2F;&#x2F; ES6 的写法</span><br><span class="line">let arr2 &#x3D; Array.from(arrayLike); &#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; NodeList 对象</span><br><span class="line">let ps &#x3D; document.querySelectorAll(&#39;p&#39;);</span><br><span class="line">Array.from(ps).forEach(function (p) &#123;</span><br><span class="line">　　console.log(p);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; arguments 对象</span><br><span class="line">function foo() &#123;</span><br><span class="line">var args &#x3D; Array.from(arguments);</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符串转换为字符数组str.split(&#39;&#39;)</span><br><span class="line">Array.from(&#39;hello&#39;)  &#x2F;&#x2F; [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span><br><span class="line">let namesSet &#x3D; new Set([&#39;a&#39;, &#39;b&#39;])</span><br><span class="line">Array.from(namesSet) &#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;]</span><br><span class="line"></span><br><span class="line">Array.from(&#123; length: 3 &#125;);  &#x2F;&#x2F; [ undefined, undefined, undefined ]</span><br></pre></td></tr></table></figure>

<p>对于还没有部署该方法的浏览器，可以用 Array.prototype.slice 方法替代：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const toArray &#x3D; (() &#x3D;&gt;</span><br><span class="line">  Array.from ? Array.from : obj &#x3D;&gt; [].slice.call(obj)</span><br><span class="line">)();</span><br></pre></td></tr></table></figure>

<p>Array.from 还可以接受第二个参数，作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.from(arrayLike, x &#x3D;&gt; x * x);</span><br><span class="line">&#x2F;&#x2F;  等同于</span><br><span class="line">Array.from(arrayLike).map(x &#x3D;&gt; x * x);</span><br><span class="line">Array.from([1, 2, 3], (x) &#x3D;&gt; x * x)</span><br><span class="line">&#x2F;&#x2F; [1, 4, 9]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Array.from回调函数</span><br><span class="line">var arr1 &#x3D; Array.from([1,2,3], function(item)&#123;</span><br><span class="line">    return item*item;</span><br><span class="line">&#125;);</span><br><span class="line">var arr2 &#x3D; Array.from([1,2,3]).map(function(item)&#123;</span><br><span class="line">    return item*item;</span><br><span class="line">&#125;);</span><br><span class="line">var arr3 &#x3D; Array.from([1,2,3], (item) &#x3D;&gt; item*item);</span><br><span class="line"></span><br><span class="line">console.log(arr1); &#x2F;&#x2F;[ 1, 4, 9 ]</span><br><span class="line">console.log(arr2); &#x2F;&#x2F;[ 1, 4, 9 ]</span><br><span class="line">console.log(arr3); &#x2F;&#x2F;[ 1, 4, 9 ]</span><br></pre></td></tr></table></figure>

<p>还有就是扩展运算符(…)也可以将某些数据结构转为数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; arguments 对象</span><br><span class="line">function foo() &#123;</span><br><span class="line">　　var args &#x3D; [...arguments];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; NodeList 对象</span><br><span class="line">[...document.querySelectorAll(&#39;div&#39;)]</span><br></pre></td></tr></table></figure>

<h3 id="2-Array-of"><a href="#2-Array-of" class="headerlink" title="2. Array.of()"></a>2. Array.of()</h3><p>Array.of 方法用于将一组值，转换为数组。Array.of 总是返回参数值组成的数组。如果没有参数，就返回一个空数组。<br>Array.of 基本上可以用来替代 Array()或 new Array()，并且不存在由于参数不同而导致的重载。它的行为非常统一。<br>这个方法的主要目的，是弥补数组构造函数 Array()的不足。因为参数个数的不同，会导致 Array()的行为有差异</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array() &#x2F;&#x2F; []</span><br><span class="line">Array(3) &#x2F;&#x2F; [, , ,]</span><br><span class="line">Array(3, 11, 8) &#x2F;&#x2F; [3, 11, 8]</span><br><span class="line"></span><br><span class="line">Array.of() &#x2F;&#x2F; []</span><br><span class="line">Array.of(3) &#x2F;&#x2F; [3]</span><br><span class="line">Array.of(3, 11, 8) &#x2F;&#x2F; [3,11,8]</span><br><span class="line"></span><br><span class="line">Array.of(3).length &#x2F;&#x2F; 1</span><br><span class="line">Array.of(undefined) &#x2F;&#x2F; [undefined]</span><br><span class="line">Array.of(1) &#x2F;&#x2F; [1]</span><br><span class="line">Array.of(1, 2) &#x2F;&#x2F; [1, 2]</span><br></pre></td></tr></table></figure>

<h3 id="3-find-和-findIndex"><a href="#3-find-和-findIndex" class="headerlink" title="3. find() 和 findIndex()"></a>3. find() 和 findIndex()</h3><p>数组实例的 find 方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为 true 的成员，然后返回该成员。如果没有符合条件的成员，则返回 undefined。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 4, -5, 10].find((n) &#x3D;&gt; n &lt; 0)</span><br><span class="line">&#x2F;&#x2F; -5</span><br><span class="line">[1, 5, 10, 15].find(function(value, index, arr) &#123;</span><br><span class="line">    return value &gt; 9;</span><br><span class="line">&#125;) &#x2F;&#x2F; 10</span><br></pre></td></tr></table></figure>

<p>上面代码中，find 方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。<br>数组实例的 findIndex 方法的用法与 find 方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 5, 10, 15].findIndex(function(value, index, arr) &#123;</span><br><span class="line">    return value &gt; 9;</span><br><span class="line">&#125;) &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

<h3 id="4-fill"><a href="#4-fill" class="headerlink" title="4. fill()"></a>4. fill()</h3><p>fill()方法使用给定值，填充一个数组。数组中已有的元素，会被全部抹去。可以接受三个参数，指定要填充的值，指定填充的起始位置和结束位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].fill(7)</span><br><span class="line">&#x2F;&#x2F; [7, 7, 7]</span><br><span class="line">new Array(3).fill(7)</span><br><span class="line">&#x2F;&#x2F; [7, 7, 7]</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].fill(7, 1, 2)</span><br><span class="line">&#x2F;&#x2F; [&#39;a&#39;, 7, &#39;c&#39;]</span><br></pre></td></tr></table></figure>

<h3 id="5-entries-，-keys-和-values"><a href="#5-entries-，-keys-和-values" class="headerlink" title="5. entries() ， keys() 和 values()"></a>5. entries() ， keys() 和 values()</h3><p>entries()，keys()和 values() —— 用于遍历数组。它们都返回一个遍历器对象，可以用 for…of 循环进行遍历，唯一的区别是 keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (let index of [&#39;a&#39;, &#39;b&#39;].keys()) &#123;</span><br><span class="line">    console.log(index);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 0</span><br><span class="line">&#x2F;&#x2F; 1</span><br><span class="line">for (let elem of [&#39;a&#39;, &#39;b&#39;].values()) &#123;</span><br><span class="line">    console.log(elem);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; &#39;a&#39;</span><br><span class="line">&#x2F;&#x2F; &#39;b&#39;</span><br><span class="line">for (let [index, elem] of [&#39;a&#39;, &#39;b&#39;].entries()) &#123;</span><br><span class="line">    console.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 0 &quot;a&quot;</span><br><span class="line">&#x2F;&#x2F; 1 &quot;b&quot;</span><br></pre></td></tr></table></figure>

<h3 id="6-includes"><a href="#6-includes" class="headerlink" title="6. includes()"></a>6. includes()</h3><p>ES5 中，我们常用数组的 indexOf 方法，检查是否包含某个值。indexOf 方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于 -1 ，表达起来不够直观。二是，它内部使用严格相当运算符（ === ）进行判断，这会导致对 NaN 的误判。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[NaN].indexOf(NaN)</span><br><span class="line">&#x2F;&#x2F; -1</span><br><span class="line">includes使用的是不一样的判断算法，就没有这个问题。</span><br><span class="line">[NaN].includes(NaN)</span><br><span class="line">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>类似的是 ES7 中 Array.prototype.includes 方法，它返回一个布尔值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 2, 3].includes(2); &#x2F;&#x2F; true</span><br><span class="line">[1, 2, 3].includes(4); &#x2F;&#x2F; false</span><br><span class="line">[1, 2, NaN].includes(NaN); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>该方法的第二个参数表示搜索的起始位置，默认为 0 。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为 -4 ，但数组长度为 3 ），则会重置为从 0 开始。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 2, 3].includes(3, 3); &#x2F;&#x2F; false</span><br><span class="line">[1, 2, 3].includes(3, -1); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<p>另外， Map 和 Set 数据结构有一个 has 方法，需要注意与 includes 区分。<br>Map 结构的 has 方法，是用来查找键名的，比如 Map.prototype.has(key)、WeakMap.prototype.has(key)、Reflect.has(target, propertyKey)。<br>Set 结构的 has 方法，是用来查找值的，比如 Set.prototype.has(value)、WeakSet.prototype.has(value)。</p>
<h3 id="7-数组的空位"><a href="#7-数组的空位" class="headerlink" title="7. 数组的空位"></a>7. 数组的空位</h3><ul>
<li><strong>ES5 对空位的处理,大多数情况下会忽略空位。</strong><br>forEach() , filter() , every() 和 some()都会跳过空位。<br>map()会跳过空位，但会保留这个值<br>join()和 toString()会将空位视为 undefined，而 undefined 和 null 会被处理成空字符串。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; forEach方法</span><br><span class="line">[,&#39;a&#39;].forEach((x,i) &#x3D;&gt; console.log(i)); &#x2F;&#x2F; 1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; filter方法</span><br><span class="line">[&#39;a&#39;,,&#39;b&#39;].filter(x &#x3D;&gt; true) &#x2F;&#x2F; [&#39;a&#39;,&#39;b&#39;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; every方法</span><br><span class="line">[,&#39;a&#39;].every(x &#x3D;&gt; x&#x3D;&#x3D;&#x3D;&#39;a&#39;) &#x2F;&#x2F; true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; some方法</span><br><span class="line">[,&#39;a&#39;].some(x &#x3D;&gt; x !&#x3D;&#x3D; &#39;a&#39;) &#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; map方法</span><br><span class="line">[,&#39;a&#39;].map(x &#x3D;&gt; 1) &#x2F;&#x2F; [,1]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; join方法</span><br><span class="line">[,&#39;a&#39;,undefined,null].join(&#39;#&#39;) &#x2F;&#x2F; &quot;#a##&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; toString方法</span><br><span class="line">[,&#39;a&#39;,undefined,null].toString() &#x2F;&#x2F; &quot;,a,,&quot;</span><br></pre></td></tr></table></figure>

<p><strong>ES6 则是明确将空位转为 undefined。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Array.from方法会将数组的空位，转为undefined，也就是说，这个方法不会忽略空位。</span><br><span class="line">Array.from([&#39;a&#39;,,&#39;b&#39;])  &#x2F;&#x2F; [ &quot;a&quot;, undefined, &quot;b&quot; ]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;扩展运算符（...）也会将空位转为undefined。</span><br><span class="line">[...[&#39;a&#39;,,&#39;b&#39;]]  &#x2F;&#x2F; [ &quot;a&quot;, undefined, &quot;b&quot; ]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;copyWithin()会连空位一起拷贝。</span><br><span class="line">[,&#39;a&#39;,&#39;b&#39;,,].copyWithin(2,0) &#x2F;&#x2F; [,&quot;a&quot;,,&quot;a&quot;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;fill()会将空位视为正常的数组位置。</span><br><span class="line">new Array(3).fill(&#39;a&#39;) &#x2F;&#x2F; [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;for...of循环也会遍历空位。</span><br><span class="line">let arr &#x3D; [, ,];</span><br><span class="line">for (let i of arr) &#123;</span><br><span class="line">    console.log(1);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 1</span><br><span class="line">&#x2F;&#x2F; 1</span><br><span class="line">&#x2F;&#x2F;上面代码中，数组arr有两个空位，for...of并没有忽略它们。如果改成map方法遍历，空位是会跳过的。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;entries()、keys()、values()、find()和findIndex()会将空位处理成undefined。</span><br><span class="line">&#x2F;&#x2F; entries()</span><br><span class="line">[...[,&#39;a&#39;].entries()] &#x2F;&#x2F; [[0,undefined], [1,&quot;a&quot;]]</span><br><span class="line">&#x2F;&#x2F; keys()</span><br><span class="line">[...[,&#39;a&#39;].keys()] &#x2F;&#x2F; [0,1]</span><br><span class="line">&#x2F;&#x2F; values()</span><br><span class="line">[...[,&#39;a&#39;].values()] &#x2F;&#x2F; [undefined,&quot;a&quot;]</span><br><span class="line">&#x2F;&#x2F; find()</span><br><span class="line">[,&#39;a&#39;].find(x &#x3D;&gt; true) &#x2F;&#x2F; undefined</span><br><span class="line">&#x2F;&#x2F; findIndex()</span><br><span class="line">[,&#39;a&#39;].findIndex(x &#x3D;&gt; true) &#x2F;&#x2F; 0</span><br><span class="line">&#x2F;&#x2F;由于空位的处理规则非常不统一，所以建议避免出现空位。</span><br></pre></td></tr></table></figure>

<p>##参考 <a href="https://www.cnblogs.com/guorange/p/7450145.html">https://www.cnblogs.com/guorange/p/7450145.html</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令</title>
    <url>/2021/04/11/git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-新建本地git仓库"><a href="#1-新建本地git仓库" class="headerlink" title="1.新建本地git仓库"></a>1.新建本地git仓库</h2><p>1.1 git init   // 初始化版本库<br>1.2 git add .   // 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 ，*会忽略一部分文件</p>
<p>1.3 git commit -m “first commit” // 把添加的文件提交到版本库，并填写提交备注</p>
<h2 id="2-更新代码步骤-（先检查当前状态，再更新，避免发生冲突）"><a href="#2-更新代码步骤-（先检查当前状态，再更新，避免发生冲突）" class="headerlink" title="2.更新代码步骤  （先检查当前状态，再更新，避免发生冲突）"></a>2.更新代码步骤  （先检查当前状态，再更新，避免发生冲突）</h2><p>2.1 git status  查看当前状态，查看本地分支文件信息</p>
<p>2.2 git check out -[file name] 若文件有修改，可以还原到最初状态; 若文件需要更新到服务器上，应该先merge到服务器，再更新到本地</p>
<p>2.3 git branch 查看本地所有分支，当前分支</p>
<p>2.4 git checkout remote branch   若分支为本地分支，则需切换到服务器的远程分支</p>
<p>2.5 git pull 更新本地代码</p>
<h2 id="3-提交代码步骤（先更新，在提交，避免冲突）"><a href="#3-提交代码步骤（先更新，在提交，避免冲突）" class="headerlink" title="3.提交代码步骤（先更新，在提交，避免冲突）"></a>3.提交代码步骤（先更新，在提交，避免冲突）</h2><p>3.1 git status  查看当前状态，查看本地分支文件信息</p>
<p>3.2 git branch 查看本地所有分支，当前分支</p>
<p>3.3 git checkout remote branch   若分支为本地分支，则需切换到服务器的远程分支</p>
<p>3.4 git push -u origin master    // 第一次推送时</p>
<pre><code>  git push origin master  // 第一次推送后，直接使用该命令即可推送修
</code></pre>
<p>常用git命令大全<br><a href="http://blog.csdn.net/liyayunwxc/article/details/10342573">http://blog.csdn.net/liyayunwxc/article/details/10342573</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>css速查表</title>
    <url>/2021/04/11/css%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>c3 参考手册 <a href="https://www.xp.cn/css3/">https://www.xp.cn/css3/</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb使用</title>
    <url>/2021/04/11/mongodb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="mongo-中的数据类型"><a href="#mongo-中的数据类型" class="headerlink" title="mongo 中的数据类型"></a>mongo 中的数据类型</h3><p>Object ID： ⽂档 ID<br>String： 字符串， 最常⽤， 必须是有效的 UTF-8<br>Boolean： 存储⼀个布尔值， true 或 false<br>Integer： 整数可以是 32 位或 64 位， 这取决于服务器<br>Double： 存储浮点值<br>Arrays： 数组或列表， 多个值存储到⼀个键<br>Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档<br>Null： 存储 Null 值<br>Timestamp： 时间戳， 表示从 1970-1-1 到现在的总秒数<br>Date： 存储当前⽇期或时间的 UNIX 时间格式</p>
<h3 id="操作数据库命令"><a href="#操作数据库命令" class="headerlink" title="操作数据库命令"></a>操作数据库命令</h3><p>查看当前的数据库：db<br>查看所有的数据库：show dbs /show databases<br>切换数据库：use db_name 删除当前的数据库：db.dropDatabase()<br>切换到没有的数据库, 添加数据会自动创建<br>显示当前数据库状态：db.stats()<br>当前数据库版本：db.version()<br>查看当前数据库的链接机器地址：db.getMongo()</p>
<h3 id="操作集合的命令"><a href="#操作集合的命令" class="headerlink" title="操作集合的命令"></a>操作集合的命令</h3><p><em>向不存在的集合中第⼀次加⼊数据时， 集合会被创建出来</em></p>
<ul>
<li>创建用户：db.createUser({user:”laowang”,pwd:”123456”,roles:[{role:”userAdmin”,db:”stu”}]})<ul>
<li>b.createCollection(name,options)</li>
<li>db.createCollection(“stu”)</li>
<li>db.createCollection(“sub”, { capped : true, size : 10 } )<br>参数 capped： 默认值为 false 表示不设置上限,值为 true 表示设置上限<br>参数 size： 当 capped 值为 true 时， 需要指定此参数， 表示上限⼤⼩,单位为字节<br>当文档达到上限时， 会将之前的数据覆盖， 最早添加的数据移出, 其余上移, 最后添加在最后一条</li>
</ul>
</li>
</ul>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><ul>
<li>db.集合名称.insert(document)插⼊⽂档时， 如果不指定_id 参数， MongoDB 会为⽂档分配⼀个唯⼀的 ObjectId 类型的_id<br>db.stu.insert({name:’gj’,gender:1})<br>db.stu.insert({_id:”20170101”,name:’gj’,gender:1})</li>
</ul>
<h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><ul>
<li>db.集合名称.save(document)<br>如果⽂档的_id 已经存在则修改， 如果⽂档的_id 不存在则添加<br>区别于: insert 如果存在直接报错</li>
</ul>
<h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询:"></a>简单查询:</h2><ul>
<li>db.集合名称.find()</li>
</ul>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul>
<li>语法: db.集合名称.update(<query> ,<update>,{multi: <boolean>})<br>参数 query:查询条件<br>参数 update:更新操作符<br>参数 multi:可选， 默认是 false，表示只更新找到的第⼀条记录， 值为 true 表示把满⾜条件的⽂档全部更新</li>
<li>举例:注意：”multi update only works with $ operators”  更新全部, 必须使用$set<br>db.stu.update({name:’hr’},{name:’mnc’}) 更新一条,没有更新的字段会丢弃.<br>db.stu.update({name:’hr’},{$set:{name:’hys’}}) 更新一条<br>db.stu.update({},{$set:{gender:0}},{multi:true}) 更新全部</li>
</ul>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul>
<li>语法: db.集合名称.remove(<query>,{justOne: <boolean>})<br>参数 query:可选，删除的⽂档的条件<br>参数 justOne:可选， 如果设为 true 或 1， 则只删除⼀条， 默认 false， 表示删除多条</li>
</ul>
<h3 id="管道聚集-aggregate"><a href="#管道聚集-aggregate" class="headerlink" title="管道聚集 aggregate"></a>管道聚集 aggregate</h3><p><a href="https://segmentfault.com/a/1190000004263347">https://segmentfault.com/a/1190000004263347</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql指令</title>
    <url>/2021/04/11/mysql%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="MYSQL-常用命令"><a href="#MYSQL-常用命令" class="headerlink" title="MYSQL 常用命令"></a>MYSQL 常用命令</h2><p><strong>1.导出整个数据库</strong><br>mysqldump -u 用户名 -p –default-character-set=latin1 数据库名 &gt; 导出的文件名(数据库默认编码是 latin1)<br>mysqldump -u wcnc -p smgp_apps_wcnc &gt; wcnc.sql<br><strong>2.导出一个表</strong><br>mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名<br>mysqldump -u wcnc -p smgp_apps_wcnc users&gt; wcnc_users.sql<br><strong>3.导出一个数据库结构</strong><br>mysqldump -u wcnc -p -d –add-drop-table smgp_apps_wcnc &gt;d:wcnc_db.sql<br>-d 没有数据 –add-drop-table 在每个 create 语句之前增加一个 drop table<br><strong>4.导入数据库</strong><br>A:常用 source 命令<br>进入 mysql 数据库控制台，<br>如 mysql -u root -p<br>mysql&gt;use 数据库<br>然后使用 source 命令，后面参数为脚本文件(如这里用到的.sql)<br>mysql&gt;source wcnc_db.sql<br>B:使用 mysqldump 命令<br>mysqldump -u username -p dbname &lt; filename.sql<br>C:使用 mysql 命令<br>mysql -u username -p -D dbname &lt; filename.sql</p>
<h3 id="一、启动与退出"><a href="#一、启动与退出" class="headerlink" title="一、启动与退出"></a>一、启动与退出</h3><p>1、进入 MySQL：启动 MySQL Command Line Client（MySQL 的 DOS 界面），直接输入安装时的密码即可。此时的提示符是：mysql&gt;<br>2、退出 MySQL：quit 或 exit</p>
<h3 id="二、库操作"><a href="#二、库操作" class="headerlink" title="二、库操作"></a>二、库操作</h3><p>1、、创建数据库<br>命令：create database &lt;数据库名&gt;<br>例如：建立一个名为 xhkdb 的数据库<br>mysql&gt; create database xhkdb;<br>2、显示所有的数据库<br>命令：show databases （注意：最后有个 s）<br>mysql&gt; show databases;<br>3、删除数据库<br>命令：drop database &lt;数据库名&gt;<br>例如：删除名为 xhkdb 的数据库<br>mysql&gt; drop database xhkdb;<br>4、连接数据库<br>命令：use &lt;数据库名&gt;<br>例如：如果 xhkdb 数据库存在，尝试存取它：<br>mysql&gt; use xhkdb;<br>屏幕提示：Database changed<br>5、查看当前使用的数据库<br>mysql&gt; select database();<br>6、当前数据库包含的表信息：<br>mysql&gt; show tables; （注意：最后有个 s）</p>
<h3 id="三、表操作，操作之前应连接某个数据库"><a href="#三、表操作，操作之前应连接某个数据库" class="headerlink" title="三、表操作，操作之前应连接某个数据库"></a>三、表操作，操作之前应连接某个数据库</h3><p>1、建表<br>命令：create table &lt;表名&gt; ( &lt;字段名&gt; &lt;类型&gt; [,..&lt;字段名 n&gt; &lt;类型 n&gt;]);<br>mysql&gt; create table MyClass(</p>
<blockquote>
<p>id int(4) not null primary key auto_increment,<br>name char(20) not null,<br>sex int(4) not null default ’′,<br>degree double(16,2));<br>2、获取表结构<br>命令：desc 表名，或者 show columns from 表名<br>mysql&gt;DESCRIBE MyClass<br>mysql&gt; desc MyClass;<br>mysql&gt; show columns from MyClass;<br>3、删除表<br>命令：drop table &lt;表名&gt;<br>例如：删除表名为 MyClass 的表<br>mysql&gt; drop table MyClass;<br>4、插入数据<br>命令：insert into &lt;表名&gt; [( &lt;字段名&gt;[,..&lt;字段名 n &gt; ])] values ( 值 )[, ( 值 n )]<br>例如，往表 MyClass 中插入二条记录, 这二条记录表示：编号为的名为 Tom 的成绩为.45, 编号为 的名为 Joan 的成绩为.99，编号为 的名为 Wang 的成绩为.5.<br>mysql&gt; insert into MyClass values(1,’Tom’,96.45),(2,’Joan’,82.99), (2,’Wang’, 96.59);<br>5、查询表中的数据<br>1)、查询所有行<br>命令：select &lt;字段，字段，…&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;<br>例如：查看表 MyClass 中所有数据<br>mysql&gt; select from MyClass;<br>2）、查询前几行数据<br>例如：查看表 MyClass 中前行数据<br>mysql&gt; select from MyClass order by id limit 0,2;<br>或者：<br>mysql&gt; select from MyClass limit 0,2;<br>6、删除表中数据<br>命令：delete from 表名 where 表达式<br>例如：删除表 MyClass 中编号为 的记录<br>mysql&gt; delete from MyClass where id=1;<br>7、修改表中数据：update 表名 set 字段=新值,…where 条件<br>mysql&gt; update MyClass set name=’Mary’where id=1;<br>7、在表中增加字段：<br>命令：alter table 表名 add 字段 类型 其他;<br>例如：在表 MyClass 中添加了一个字段 passtest，类型为 int(4)，默认值为<br>mysql&gt; alter table MyClass add passtest int(4) default ’′<br>8、更改表名：<br>命令：rename table 原表名 to 新表名;<br>例如：在表 MyClass 名字更改为 YouClass<br>mysql&gt; rename table MyClass to YouClass;<br>更新字段内容<br>update 表名 set 字段名 = 新内容<br>update 表名 set 字段名 = replace(字段名,’旧内容’,’新内容’)</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm一些指令</title>
    <url>/2021/04/11/nvm%E4%B8%80%E4%BA%9B%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>nvm list 是查找本电脑上所有的 node 版本</p>
<ul>
<li>nvm list 查看已经安装的版本</li>
<li>nvm list installed 查看已经安装的版本</li>
<li>nvm list available 查看网络可以安装的版本</li>
</ul>
<p>nvm install 安装最新版本 nvm</p>
<p>nvm use <version> ## 切换使用指定的版本 node</p>
<p>nvm ls 列出所有版本</p>
<p>nvm current 显示当前版本</p>
<p>nvm alias <name> <version> ## 给不同的版本号添加别名</p>
<p>nvm unalias <name> ## 删除已定义的别名</p>
<p>nvm reinstall-packages <version> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</p>
<p>nvm on 打开 nodejs 控制</p>
<p>nvm off 关闭 nodejs 控制</p>
<p>nvm proxy 查看设置与代理</p>
<p>nvm node_mirror [url] 设置或者查看 setting.txt 中的 node_mirror，如果不设置的默认是 <a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a><br>　　 nvm npm_mirror [url] 设置或者查看 setting.txt 中的 npm_mirror,如果不设置的话默认的是： <a href="https://github.com/npm/npm/archive/">https://github.com/npm/npm/archive/</a>.</p>
<p>nvm uninstall <version> 卸载制定的版本</p>
<p>nvm use [version] [arch] 切换制定的 node 版本和位数</p>
<p>nvm root [path] 设置和查看 root 路径</p>
<p>nvm version 查看当前的版本</p>
]]></content>
      <tags>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>vue swiper问题</title>
    <url>/2021/04/11/swiper%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E6%97%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://blog.csdn.net/front_endxiaobaia/article/details/105206691">https://blog.csdn.net/front_endxiaobaia/article/details/105206691</a></p>
]]></content>
      <categories>
        <category>插件</category>
        <category>swiper</category>
      </categories>
      <tags>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router报错</title>
    <url>/2021/04/11/vue-router%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="重复点击导航时，控制台出现不影响功能的报错"><a href="#重复点击导航时，控制台出现不影响功能的报错" class="headerlink" title="重复点击导航时，控制台出现不影响功能的报错~~"></a>重复点击导航时，控制台出现不影响功能的报错~~</h1><p>错误贴个图<br><img src="https://img2020.cnblogs.com/blog/2304151/202103/2304151-20210310014250607-645824452.png" alt="vue-router"></p>
<p><strong>解决</strong></p>
<ul>
<li><p>方案一： router.js 文件中添加如下代码<br><img src="https://img2020.cnblogs.com/blog/2304151/202103/2304151-20210310014950447-330606213.png" alt="solve1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重复点击导航时，控制台出现不影响功能的报错</span><br><span class="line">const VueRouterPush &#x3D; Router.prototype.push;</span><br><span class="line">Router.prototype.push &#x3D; function push(to) &#123;</span><br><span class="line">  return VueRouterPush.call(this, to).catch(err &#x3D;&gt; err);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>方案二： 在跳转时，判断以下当前路由与跳转的路由是否一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toMenu (item) &#123;</span><br><span class="line">if (this.$route.path !&#x3D;&#x3D; item.url) &#123;</span><br><span class="line">  this.$router.push(&#123; path: item.url &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>方案三： 使用 catch 方法捕获 router.push 异常。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$router.push(route).catch(err &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;输出报错&#39;,err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue全家桶</tag>
      </tags>
  </entry>
  <entry>
    <title>vue swiper5</title>
    <url>/2021/04/11/swiper5%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://img2020.cnblogs.com/blog/2304151/202102/2304151-20210214155707221-403777173.png" alt="swiper"></p>
<p>swiper6 和 swiper5 所需文件所在目录不一样。（懒得截屏说明了，有兴趣的小伙伴可以去试试，图仅展示两个版本的区别）。</p>
<p>本次使用 vs cod 中 install <a href="mailto:&#x73;&#119;&#105;&#x70;&#101;&#x72;&#x40;&#53;&#46;&#52;&#46;&#53;">&#x73;&#119;&#105;&#x70;&#101;&#x72;&#x40;&#53;&#46;&#52;&#46;&#53;</a>，会按照 swiper6 的目录去找文件，会报找不到某个文件的 error。</p>
]]></content>
      <categories>
        <category>插件</category>
        <category>swiper</category>
      </categories>
      <tags>
        <tag>swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>使用better-scroll</title>
    <url>/2021/04/11/%E4%BD%BF%E7%94%A8better-scroll%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>基本使用略过！！！</p>
<p>使用$nextTick()可以将 better-scroll（以下简称 BS）延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">                    var scroll &#x3D; new BScroll(this.$refs.movie_body , &#123;</span><br><span class="line">                        &#x2F;&#x2F; pullUpLoad: true,</span><br><span class="line">                        &#x2F;&#x2F; scrollbar: true,</span><br><span class="line">                        &#x2F;&#x2F; pullDownRefresh: true,</span><br><span class="line">                        click: true,</span><br><span class="line">                        probeType: 1</span><br><span class="line">                    &#125;)</span><br></pre></td></tr></table></figure>

<p><em>重点是在于要是多个页面中使用到 BS 呢？封装成一个组件之后遇到刷新后无法滚动的问题。</em></p>
<p><em>将 BS 封装为组件的 DOM 结构，slot 里分发的内容其实是 ul</em><br><img src="https://img2020.cnblogs.com/blog/2304151/202103/2304151-20210303230419241-1758805160.png" alt="img1"></p>
<p><em>Chrome 渲染的结构</em><br><img src="https://img2020.cnblogs.com/blog/2304151/202103/2304151-20210303230347378-162691737.png" alt="img2"></p>
<p>上图，DOM 的确已经出现了 css 样式，但是仍旧不滚动。<br>参考了许多帖子仍旧未解决我的问题，其实我也有了一些猜测，可能是类似 swiper 初始化过早的问题，然后添加延时成功解决。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        var scroll &#x3D; new BScroll( this.$refs.wrapper, &#123;</span><br><span class="line">                click: true,</span><br><span class="line">                probeType: 1,</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; scroll.on(&#39;scroll&#39;,(pos) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F;     this.handleToScroll(pos)</span><br><span class="line">        &#x2F;&#x2F; &#125;);</span><br><span class="line">        &#x2F;&#x2F; scroll.on(&#39;touchEnd&#39;,(pos) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F;     this.handleToTouchEnd(pos)</span><br><span class="line">        &#x2F;&#x2F; &#125;)</span><br><span class="line">        &#125;,500)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>插件</category>
        <category>better-scroll</category>
      </categories>
      <tags>
        <tag>better-scroll</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS实现居中的方式</title>
    <url>/2021/04/11/%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1、水平居中"><a href="#1、水平居中" class="headerlink" title="1、水平居中"></a>1、水平居中</h3><p><strong>行内元素水平居中</strong><br>利用 text-align: center 可以实现在块级元素内部的行内元素水平居中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;center-text&quot;&gt;</span><br><span class="line">    简单是稳定的前提。</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">    height:60px;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">.center-text &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-d89a386d0a12a979.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="text-align"></p>
<p><strong>块级元素水平居中</strong><br>此方法必须有固定的宽度，通过设置 margin: 0 auto 可以实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;center-block&quot;&gt;</span><br><span class="line">        简单不先于复杂，而是在复杂之后。</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">    height:100px;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">.center-block &#123;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    width: 8rem;</span><br><span class="line">    padding:1rem;</span><br><span class="line">    color:#fff;</span><br><span class="line">    background:#000;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-122fcd9fc8440156.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="margin"></p>
<p><strong>多块级元素水平居中</strong></p>
<ul>
<li>利用 inline-block<br>如果一行中有两个或两个以上的块级元素，通过设置块级元素的显示类型为 inline-block 和父容器的 text-align 属性从而使多块级元素水平居中。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;inline-block&quot;&gt;</span><br><span class="line">        简单不先于复杂</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;inline-block&quot;&gt;</span><br><span class="line">        而是在复杂之后</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;inline-block&quot;&gt;</span><br><span class="line">        简单不先于复杂，而是在复杂之后。</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">    height:100px;</span><br><span class="line">    padding: 8px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">.inline-block &#123;</span><br><span class="line">    padding: 8px;</span><br><span class="line">    width: 4rem;</span><br><span class="line">    margin: 0 8px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background: #000;</span><br><span class="line">    display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">.container &gt;div:first-child &#123;</span><br><span class="line">    height: 45px;</span><br><span class="line">&#125;</span><br><span class="line">.container &gt;div:nth-of-type(2) &#123;</span><br><span class="line">    height: 45px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-d15f3df93fd6ba92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="inline-block"></p>
<ul>
<li>利用 displa: flex<br>利用弹性布局(flex)，实现水平居中，其中 justify-content 用于设置弹性盒子元素在主轴(横向)方向上的对齐方式。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;flex-center&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        简单不先于复杂。</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        简单不先于复杂，而是在复杂之后。</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        而是在复杂之后。</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.flex-center &#123;</span><br><span class="line">    padding: 8px;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items:flex-end;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">.flex-center &gt;div &#123;</span><br><span class="line">    padding: 8px;</span><br><span class="line">    width: 4rem;</span><br><span class="line">    margin: 0 8px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background: #000;</span><br><span class="line">&#125;</span><br><span class="line">.flex-center &gt;div:first-child &#123;</span><br><span class="line">    height: 45px;</span><br><span class="line">&#125;</span><br><span class="line">.flex-center &gt;div:last-child &#123;</span><br><span class="line">    height: 45px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-61c2593ed94d3d23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flex"></p>
<h3 id="2、垂直居中"><a href="#2、垂直居中" class="headerlink" title="2、垂直居中"></a>2、垂直居中</h3><p><strong>单行行内元素垂直居中</strong><br>通过设置内联元素的高度(height)和行高(line-height)相等，从而使元素垂直居中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    软件在能够复用前必须先能用。</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">#box &#123;</span><br><span class="line">    height: 120px;</span><br><span class="line">    line-height: 120px;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-4a149d318dc310d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="line-height"></p>
<p><strong>多行元素垂直居中</strong></p>
<ul>
<li>利用表格布局<br>利用表布局的 vertical-align: middle 可以实现子元素的垂直居中 。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;center-table&quot;&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;v-cell&quot;&gt;</span><br><span class="line">        The more technology you learn,&lt;br&gt;</span><br><span class="line">        the more you realize how little you know.</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.center-table &#123;</span><br><span class="line">    display: table;</span><br><span class="line">    height: 140px;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">.v-cell &#123;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-4182c9220bc0527f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vertical-align"></p>
<ul>
<li>利用 flex 布局<br>利用 flex 布局实现垂直居中，其中 flex-direction: column 定义主轴方向为纵向。flex 是在 CSS3 中定义，在较老的浏览器中存在兼容问题。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;center-flex&quot;&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        Dance like nobody is watching,&lt;br&gt;</span><br><span class="line">        code like everybody is.</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.center-flex &#123;</span><br><span class="line">    height: 140px;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-8989bf9e3b42f0a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flex1"></p>
<p><strong>块级元素垂直居中</strong></p>
<ul>
<li>固定高度的块级元素<br>已知居中元素的高度和宽度，垂直居中问题就很简单。通过绝对定位元素距离顶部 50%，并设置 margin-top 向上偏移元素高度的一半，就可实现垂直居中。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;控制复杂性是计算机编程的本质。&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">    height: 140px;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin-top: -50px;</span><br><span class="line">    color:#fff;</span><br><span class="line">    background: #000;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-7e896650c33e6ba3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="chuizhijuzhong"></p>
<ul>
<li>未知高度的块级元素<br>当垂直居中的块级元素高度未知时，可以借助 CSS3 中的 transform 属性向 Y 轴反向偏移 50%的方法实现垂直居中，部分浏览器可能存在兼容性问题。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;世界上有 10 种人，懂二进制的和不懂二进制的。&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">    height: 140px;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translateY(-50%);</span><br><span class="line">    background: black;</span><br><span class="line">    color: #fff;</span><br><span class="line">    padding: 1rem;</span><br><span class="line">    width: 12rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3、水平垂直居中"><a href="#3、水平垂直居中" class="headerlink" title="3、水平垂直居中"></a>3、水平垂直居中</h3><ul>
<li>固定宽高元素水平垂直居中<br>通过 margin 平移元素整体宽度的一半，使元素水平垂直居中。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;控制复杂性是计算机编程的本质。&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">    height: 140px;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 80px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin: -50px 0 0 -110px;</span><br><span class="line">    background: black;</span><br><span class="line">    color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-403dfa1d3853092a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="水平垂直居中1"></p>
<ul>
<li>未知宽高元素水平垂直居中<br>利用 2D 变换，在水平和垂直方向都反向平移宽高的一半，从而使元素水平垂直居中。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;当你试图解决一个你不理解的问题时，复杂化就产成了。当你试图解决一个你不理解的问题时，复杂化就产成了。&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">    height: 140px;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">    color: #fff;</span><br><span class="line">    background: black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-4d263c3e1283d635.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="水平垂直居中2"></p>
<ul>
<li>利用 flex 布局<br>利用 flex 布局，其中 justify-content 用于设置或检索弹性盒子元素在主轴上方向上的对齐方式；而 align-items 属性定义 flex 子项在 flex 容器的当前行的侧轴方向上的对齐方式。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;child&quot;&gt;Facebook wasn&#39;t built in a day.&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">    height: 140px;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">    border: 2px dashed #f69c55;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    background: black;</span><br><span class="line">    color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/6932056-5fae7cd5844be6a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="水平垂直居中3"></p>
<p>##居中总结图<br><img src="https://upload-images.jianshu.io/upload_images/6932056-f259f9253ab852b1.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="总结"></p>
<p>参考: <a href="https://www.cnblogs.com/ghq120/p/10939835.html">https://www.cnblogs.com/ghq120/p/10939835.html</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>JS常用方法整理</title>
    <url>/2021/04/11/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Array"><a href="#Array" class="headerlink" title="Array:"></a>Array:</h3><p>slice(start,end) 从索引为 start 的开始取，取到索引为 end 的为止，end 的取不到, 如果 end 为负数，表示索引为数组的长度+负数.<br>toString() 把数组转换成字符串，每一项用,分割<br>valueOf() 返回数组对象本身</p>
<p>indexOf()从数组开头开始获取<br>lastIndexof()从数组末尾开始获取<br>获取数组中某元素的索引(位置) 如果要检索的数组值没有出现，则该方法返回 -1。</p>
<p>push() 添加到数组的最后面<br>pop() 删除数组中的最后一个<br>shift() 删除数组中的最前一个<br>unshift() 添加到数组的最前面<br>reverse() 将数组中的元素进行反转，倒序显示<br>sort() 将数组元素进行排序<br>filter() 返回 true 的留下，false 的舍弃<br>forEach() 循环遍历里面的每一个元素<br>array.splice(0,arr.length); 删除数组中所有项目<br>join() 将数组中的元素连接成字符串输出<br>concat() 连接两个数组<br>slice() 从当前数组中截取一个新的数组，不影响原来的数组，参数 start 从 0 开始,end 从 1 开始,end 截取不到。<br>splice() 删除或替换当前数组的某些项目，参数 start,deleteCount,options(要替换的项目),</p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>获取字符串中字符的索引: 如果要检索的字符串值没有出现，则该方法返回 -1。<br>indexOf() 返回指定内容在元字符串中的位置<br>lastIndexOf() 从后往前找，只找第一个匹配的</p>
<p>trim() 只能去除字符串前后的空白<br>字符串.toUpperCase() 字符串转成大写<br>字符串.toLowerCase() 字符串转成小写<br>concat() 拼接字符串，等效于+，+更常用<br>slice() 从 start 位置开始，截取到 end 位置，end 取不到<br>substring() 从 start 位置开始，截取到 end 位置，end 取不到<br>substr() 从 start 位置开始，截取 length 个字符，只有一个就参数就截取到最后<br>replace() 替换字符串的某元素,并返回替换后的字符串<br>split() 将字符串分割(l 转换)成数组</p>
<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>本身就是一个对象, 不需要在通过构造函数去创建, 该对象中集合了很多关于数学运算的方法<br>Math.abs() 获取一个对象的绝对值<br>Math.round() 四舍五入<br>Math.PI π<br>Math.max() 求几个数的最大数<br>Math.min() 求几个数的最小数<br>Math.ceil() 向上取整<br>Math.floor() 向下取整<br>Math.random() 随机数 (随机生成 0 ~1 之间的数)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.floor(Math.random()*10) &#x2F;&#x2F; 获取随机生成 0 到 10之间的整数</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
